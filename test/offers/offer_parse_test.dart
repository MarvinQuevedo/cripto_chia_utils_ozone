// ignore_for_file: unused_local_variable

import 'package:chia_crypto_utils/chia_crypto_utils.dart';
import 'package:test/test.dart';

const testOfferData =
    'offer1qqr83wcuu2rykcmqvpsxygqqemhmlaekcenaz02ma6hs5w600dhjlvfjn477nkwz369h88kll73h37fefnwk3qqnz8s0lle09pw462xx09t7y5lzsaa3wkmlpqzz6zh9h0dwzd8hmdy7kl4mlhl30tcq9fu7hftsdtrdyavus4388jhyfuhdwt6gpyyffhdzjrfmhkdu0lleus7nl7mhr00uhmnsqq7cne75d8fltrvnjcsvp5lufezer88m7awwxymvg4k57n8km454s6jhlp0xkplfl80h7hmwm6g6r80m42amy7apcl0hsnmhcadrdnsqyrunwv8c7s4r3ug3vl6gvdl2xve95vejtl68va9gdczvpyjx6tagtaj3f08lamzs0a6wwwexmw5nujl0hj8esnlq3y6cwx4ahjf0km2velaluqzm8c5xx79qeh6w85xfzduvzfjegtx4khdvqem2hw00lc2fxdl7khgtmeljs40jp3yr3y8k9h0k3ndpu464vak92knm44edhxuvcm7fmxpmv2ap2cs3w84r7vemgjgq50en8smh0crfecqh9ncf6867uc0m93xwc9sd7m7lq6ntcajke92uhyjd6m7npuy0vk08czyk9a9078msey5zj2fgkmfd0n7vf4xy7twk9dy26jxd98tyhnk065hu3jp0eyhavde5xscr2d3sxlfgwj8fs2zh2cdz0fvst20fgpanx95gx3nmwt0fj0tgu6edzf0r70wcnhznmkj8xntxf5lfu6mauddmksmlel7ljs9mgvqdves4ycj6v4fx5ejxf6f8z5j7wfz4vh47f95mz6tpj95evu2w0frxdf43d9tgn2t3s9uhvkjws9chvlnwv4mx2mj949ckawtf4f0xvs26k909ukjfw9yhuywsm9arnxtem8atn2f93y5cjfvf0fvut7tegqn5r3n2nw90xsqr0hzj2gpjxa3ur9g90kdeamwkddvmqsrda8d56cd0en8xevw6kje0d2yuv9a0f7c940nupshst7tm08l65frmxl8d370ekx65whaafx2am0tza8nqw0084e0je39a0wa3z3v28vmz9r5hyazkd369dryq00lgln52zyd5layezkpegl2827l65h9l3fqn538al6pp8euafmj4klrdjxh03w0e2pgtrhdx004x5yr9kpeqetwrxuatkdp6hv6wseuhlmfmjcanurmeth7w6ykfndmkh6w8g4fkjh6le3f5xml0c062chdludleel6mmxsp28tvftqqwf0q8r4vx4k0w7uqph0rq300a9ncxjfdhnr6u8ej47hvmvgdwule0y9gndw34hfau7tlm7kxj7asfqalrkd9gm0ecrsxsua9v0nxvk9fmzqy4l0lhlstacpjh6zqlwkeh8fzwdtxl6d8gmkwk5tzneumxhwyc56dsk7t3ltnlchepv2u7287rsn3p62cmrlu8ex9ealac3dnmutdkfemvznult2hqak9lu2kp9upge6uqrsxxm85qr8csrvsys4rnxgtcq8vyqg4gzfjn5vw8lkmla03q663c6llya6cm5prr72dzuhcvzp9haca5ftuvklgya8tpldagwlnklpm9mxwgkkwlhkanaeuu0hylzar6vetxcwh5ll3u88exycwxelzehh6042uv6mtkl5ewmj554averd2atf4v53jjxxw0c06lfjyjz7mc87r3sthwfel3y3u7vms3nj3t6m9dnyg94qr8hpax4lv67l4wh0v6ulkfag47hr8pgq9434ka5f9gg5d';

Future<void> main() async {
  void testParseOfferFile() {
    final offer = Offer.fromBench32(testOfferData);
    final offerBundleBytes = offer.bundle.toBytes().sha256Hash();

    final compressedAgain = offer.toBench32();

    final offer2 = Offer.fromBench32(compressedAgain);
    final offerBundleBytes2 = offer2.bundle.toBytes().sha256Hash();

    expect(offerBundleBytes.toHex() == offerBundleBytes2.toHex(), true);
  }

  test('Parse Offer', () async {
    testParseOfferFile();
  });
}
